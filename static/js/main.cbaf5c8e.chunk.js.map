{"version":3,"sources":["logo.svg","Components/Header/index.js","Components/Embed/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Adobe","react_default","a","createElement","href","target","Google","Header","Header_Adobe","Header_Google","Component","Embed","className","App","Container","Row","Col","Components_Header","Components_Embed","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sMCElCC,EAAQ,kBACZC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,oEAC2D,IACzDF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,kDAAkDC,OAAO,UAAjE,gBAEK,IAJP,yCAKyC,IACvCJ,EAAAC,EAAAC,cAAA,KACEC,KAAK,uDACLC,OAAO,UAFT,mBAKK,IAXP,kBAcAJ,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,mBADF,+BAGAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wDAC6CF,EAAAC,EAAAC,cAAA,4BAD7C,KAGAF,EAAAC,EAAAC,cAAA,yLAG0CF,EAAAC,EAAAC,cAAA,2BAH1C,MAMFF,EAAAC,EAAAC,cAAA,gEACsDF,EAAAC,EAAAC,cAAA,gBADtD,yEAE6DF,EAAAC,EAAAC,cAAA,mBAAc,IAF3E,4KAUEG,EAAS,kBACbL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,qEAiBWI,mLAXX,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAACM,EAAD,cAPaC,aCbNC,mLAhCX,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,0NAGyE,IACvEF,EAAAC,EAAAC,cAAA,mCAJF,gBAI6C,IAC3CF,EAAAC,EAAAC,cAAA,6CALF,+DAQAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,uBACaF,EAAAC,EAAAC,cAAA,oBADb,sCAC+D,IAC7DF,EAAAC,EAAAC,cAAA,2BAFF,4EAKAF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACbX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mIAtBMO,aC6BLG,gMApBX,OACEZ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAD,QAGJhB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACe,EAAD,iBAbIR,cCGES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cbaf5c8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nconst Adobe = () => (\n  <div>\n    <h3>Adobe Analytics/Adobe Launch</h3>\n    <p>\n      Quicken Loans runs a web analytics stack centered around{\" \"}\n      <a href=\"//www.adobe.com/experience-platform/launch.html\" target=\"_blank\">\n        Adobe Launch\n      </a>{\" \"}\n      (formerly DTM) for data collection and{\" \"}\n      <a\n        href=\"https://www.adobe.com/analytics/adobe-analytics.html\"\n        target=\"_blank\"\n      >\n        Adobe Analytics\n      </a>{\" \"}\n      for reporting.\n    </p>\n    <p>\n      <b>Launch</b> has two primary functions:\n    </p>\n    <ul>\n      <li>\n        Collect data from a website and send it to <b>Adobe Analytics</b>.\n      </li>\n      <li>\n        Load vendor code or other code unrelated to the core application.\n        Examples include Facebook marketing code and the Live Engage Chat\n        library. This process is referred to as <b>tag management</b>.\n      </li>\n    </ul>\n    <p>\n      Please note that the collection of web analytics is <b>not</b> automatic\n      and must be configured on a per property basis. Typically, <b>Launch</b>{\" \"}\n      properties (collections of analytics rules) are segmented by codebase,\n      rather than domain. The data collected by a property is determined by its\n      various stakeholders.\n    </p>\n  </div>\n);\n\nconst Google = () => (\n  <div>\n    <h3>Google Analytics</h3>\n    <p>Here is some content about how we use google analytics</p>\n  </div>\n);\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Web Analytics Standards</h1>\n        <h2>The Tools</h2>\n        <Adobe />\n        <Google />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Embed extends Component {\n  render() {\n    return (\n      <div>\n        <h3>Embedding Launch</h3>\n        <p>\n          The Launch javascript snippet loads the Launch library on a page and\n          should be loaded in the global head as high as possible. Each page\n          requires one snippet, but it differs based on environment: one for the{\" \"}\n          <b>production environment</b>, and one for{\" \"}\n          <b>all non-production environments.</b> It is recommended that you\n          load the library asychronously.\n        </p>\n        <h4>Non-Production</h4>\n        <p>\n          This is an <b>EXAMPLE</b> of a Launch script to be placed in{\" \"}\n          <b>non-production</b> environments. Note the async attribute and\n          \"-staging\" flag in the file.\n        </p>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <pre>\n              <code>\n                &lt;script\n                src=\"\"//assets.adobedtm.com/launch-ENc379233258344e5ab0033464ce7e8d21-staging.min.js\"&gt;&lt;/script&gt;\n              </code>\n            </pre>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Embed;\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Header from \"./Components/Header\";\nimport Embed from \"./Components/Embed\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Container>\n          <Row>\n            <Col>\n              <Header />\n            </Col>\n          </Row>\n          <hr />\n          <Row>\n            <Col>\n              <Embed />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}